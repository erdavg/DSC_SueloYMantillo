list.files()
data <- read.csv("bdmir.csv")
data <- read.csv("bdmir.csv", encoding = "UTF-8")
data <- read.csv("bdmir.csv", encoding = "latin1")
head(data)
anova <- data %>% select(data$MEDICAMENTO)
anova <- data %>% select(data$MEDICAMENTO, data$AÑOS.EVOLUCIÓN.DM)
anova <- data %>% select(MEDICAMENTO, AÑOS.EVOLUCIÓN.DM)
attach(anova)
names(anova)
class(MEDICAMENTO)
as.character(anova$MEDICAMENTO)
class(MEDICAMENTO)
class(anova$MEDICAMENTO)
as.character(anova$MEDICAMENTO)
class(anova$MEDICAMENTO)
as.character(MEDICAMENTO)
class(MEDICAMENTO)
MEDICAMENTO <- as.character(MEDICAMENTO)
class(MEDICAMENTO)
names(anova)
factor(MEDICAMENTO)
print(levels(MEDICAMENTO))
class(MEDICAMENTO)
print(levels(MEDICAMENTO))
factor(MEDICAMENTO)
levels(MEDICAMENTO) <- c("garbapentina", "pregabalina")
print(levels(MEDICAMENTO))
fator(MEDICAMENTO)
factor(MEDICAMENTO)
levels(MEDICAMENTO) <- c("garbapentina", "pregabalina")
print(levels(MEDICAMENTO))
factor(MEDICAMENTO)
factores_recodificados <- recode(factores, "1" = "garbapentina", "2" = "pregalabina")
factores_recodificados <- recode(MEDICAMENTO, "1" = "garbapentina", "2" = "pregalabina")
print(factores_recodificados)
summary(anova)
summary(MEDICAMENTO)
git init
git --version
git clone
## Ver version de R
R.version
## Como instalar paquetes
install.packages(tidyverse)
install.packages("gapminder")
install.packages("viridis")
## Como instalar paquetes
install.packages("tidyverse")
install.packages("viridis")
install.packages("ggthemes")
install.packages("datos")
install.packages("skimr")
install.packages("janitor")
install.packages("palmerpenguins")
library(tidyverse); library("gapminder"); library(viridis); library(ggthemes);
library(datos);library("skimr");library("janitor"); library("palmerpenguins")
## Ver version de R
R.version
install.packages("sp")
## alpha sirve para hacer transparente las figuras
ggplot(data = millas) +
geom_point(mapping = aes(x= cilindrada, y = autopista, alpha = clase))
str(millas)
## Ver las bases de datos precargadas
data()
head(mtcars)
head(airquality)
library(tidyverse); library(gapminder); library(viridis); library(ggthemes);
library(datos);library(skimr);library(janitor); library(palmerpenguins)
## Aqui usamos la libreria datos
head(millas)
str(millas)
ggplot(data = millas) +
geom_point(mapping = aes(x= cilindrada, y = autopista, alpha = clase))
## Shape sirve para cambiar la forma de las figiuras
ggplot(data = millas) +
geom_point(mapping = aes(x= cilindrada, y = autopista, shape = clase))
ggplot(data = millas) +
geom_point(mapping = aes(x= cilindrada, y = autopista, shape = clase, color = "blue"))
## Separar los graficos en clase
ggplot(data = millas) +
geom_point(mapping = aes(x= cilindrada, y = autopista))+
facet_wrap(~clase, nrow = 2)
ggplot(data = millas) +
geom_point(mapping = aes(x= cilindrada, y = autopista))+
facet_wrap(~clase, nrow = 2)
## Separar los graficos en clase
ggplot(data = millas) +
geom_point(mapping = aes(x= cilindrada, y = autopista))+
facet_wrap(~clase, nrow = 2)
library(tidyverse); library(gapminder); library(viridis); library(ggthemes);
library(datos);library(skimr);library(janitor); library(palmerpenguins)
ggplot(data = millas) +
geom_point(mapping = aes(x= cilindrada, y = autopista))+
facet_wrap(~clase, nrow = 2)
ggplot(data = millas) +
geom_smooth(mapping = aes(x= cilindrada, y = autopista, linetype= traccion))
##  Hacer un geom_smooth
ggplot(data = millas) +
geom_smooth(mapping = aes(x= cilindrada, y = autopista, linetype= traccion, color = traccion))
h <- hola
h <- 56
##Crear un objeto
minombre <- ("Erick")
class(nombres)
class("nombres")
class("peso")
## Convertir a numerico
as.numeric("peso")
class(peso)
## Convertir a numerico
as.numeric(peso)
peso <- c(52, 74, 65, 48, 70, 84)
## Convertir a numerico
as.numeric(peso)
class(peso)
class(peso)
as.integer(peso)
class(peso)
numero <- 33
class(numero)
as.integer(numero)
class(numero)
source("C:/CursoR/Clase1.R")
source("C:/CursoR/Clase1.R")
source("C:/CursoR/Clase1.R")
source("C:/CursoR/Clase1.R")
source("C:/CursoR/Clase1.R")
class(numero)
as.integer(numero)
## Filtrar con R nativo las especies que hay en el dataset
unique(penguins$species)
library(tidyverse); library(gapminder); library(viridis); library(ggthemes);
library(datos);library(skimr);library(janitor); library(palmerpenguins)
## Cargar librerias
library(ggplot2); library(dplyr); library(gapminder); library(viridis); library(ggthemes);
## LIMPIEZA DE DATOS ##
## Usamos la libreria de palmerpenguins
## Contiene informacion de diferentes especies de pinguinos en diferentes islas
## Funcion para resumen comprensivo del dataset
data(penguins)
## Filtrar con R nativo las especies que hay en el dataset
unique(penguins$species)
## Filtrar con dplyr
penguins %>%
distinct(species)
levels(penguins$species)
knitr::opts_chunk$set(echo = TRUE)
citation()
citation(tidyverse)
EsteEsUnNuevoObjeto <- print("Este es un nuevo objeto")
install.packages("Tidyverse")
install.packages(c("audio", "bslib", "cpp11", "curl", "datos", "dbplyr", "DEoptimR", "digest", "emmeans", "fontawesome", "fs", "future", "gargle", "gert", "ggplot2", "gtable", "htmltools", "httr", "igraph", "jsonlite", "kutils", "lavaan", "lme4", "magick", "markdown", "Matrix", "modeldata", "openssl", "patchwork", "pbapply", "pkgload", "processx", "progressr", "promises", "purrr", "quantmod", "quantreg", "Rcpp", "RcppArmadillo", "readxl", "remotes", "rmarkdown", "rpf", "rstudioapi", "sass", "sfsmisc", "shiny", "SimDesign", "testthat", "tinytex", "Tmisc", "uuid", "vctrs", "viridis", "xfun", "xml2"))
install.packages(c("audio", "bslib", "cpp11", "curl", "datos", "dbplyr", "DEoptimR", "digest", "emmeans", "fontawesome", "fs", "future", "gargle", "gert", "ggplot2", "gtable", "htmltools", "httr", "igraph", "jsonlite", "kutils", "lavaan", "lme4", "magick", "markdown", "Matrix", "modeldata", "openssl", "patchwork", "pbapply", "pkgload", "processx", "progressr", "promises", "purrr", "quantmod", "quantreg", "Rcpp", "RcppArmadillo", "readxl", "remotes", "rmarkdown", "rpf", "rstudioapi", "sass", "sfsmisc", "shiny", "SimDesign", "testthat", "tinytex", "Tmisc", "uuid", "vctrs", "viridis", "xfun", "xml2"))
install.packages(c("audio", "bslib", "cpp11", "curl", "datos", "dbplyr", "DEoptimR", "digest", "emmeans", "fontawesome", "fs", "future", "gargle", "gert", "ggplot2", "gtable", "htmltools", "httr", "igraph", "jsonlite", "kutils", "lavaan", "lme4", "magick", "markdown", "Matrix", "modeldata", "openssl", "patchwork", "pbapply", "pkgload", "processx", "progressr", "promises", "purrr", "quantmod", "quantreg", "Rcpp", "RcppArmadillo", "readxl", "remotes", "rmarkdown", "rpf", "rstudioapi", "sass", "sfsmisc", "shiny", "SimDesign", "testthat", "tinytex", "Tmisc", "uuid", "vctrs", "viridis", "xfun", "xml2"))
install.packages(c("audio", "bslib", "cpp11", "curl", "datos", "dbplyr", "DEoptimR", "digest", "emmeans", "fontawesome", "fs", "future", "gargle", "gert", "ggplot2", "gtable", "htmltools", "httr", "igraph", "jsonlite", "kutils", "lavaan", "lme4", "magick", "markdown", "Matrix", "modeldata", "openssl", "patchwork", "pbapply", "pkgload", "processx", "progressr", "promises", "purrr", "quantmod", "quantreg", "Rcpp", "RcppArmadillo", "readxl", "remotes", "rmarkdown", "rpf", "rstudioapi", "sass", "sfsmisc", "shiny", "SimDesign", "testthat", "tinytex", "Tmisc", "uuid", "vctrs", "viridis", "xfun", "xml2"))
install.packages(c("audio", "bslib", "cpp11", "curl", "datos", "dbplyr", "DEoptimR", "digest", "emmeans", "fontawesome", "fs", "future", "gargle", "gert", "ggplot2", "gtable", "htmltools", "httr", "igraph", "jsonlite", "kutils", "lavaan", "lme4", "magick", "markdown", "Matrix", "modeldata", "openssl", "patchwork", "pbapply", "pkgload", "processx", "progressr", "promises", "purrr", "quantmod", "quantreg", "Rcpp", "RcppArmadillo", "readxl", "remotes", "rmarkdown", "rpf", "rstudioapi", "sass", "sfsmisc", "shiny", "SimDesign", "testthat", "tinytex", "Tmisc", "uuid", "vctrs", "viridis", "xfun", "xml2"))
install.packages(c("audio", "bslib", "cpp11", "curl", "datos", "dbplyr", "DEoptimR", "digest", "emmeans", "fontawesome", "fs", "future", "gargle", "gert", "ggplot2", "gtable", "htmltools", "httr", "igraph", "jsonlite", "kutils", "lavaan", "lme4", "magick", "markdown", "Matrix", "modeldata", "openssl", "patchwork", "pbapply", "pkgload", "processx", "progressr", "promises", "purrr", "quantmod", "quantreg", "Rcpp", "RcppArmadillo", "readxl", "remotes", "rmarkdown", "rpf", "rstudioapi", "sass", "sfsmisc", "shiny", "SimDesign", "testthat", "tinytex", "Tmisc", "uuid", "vctrs", "viridis", "xfun", "xml2"))
install.packages(c("audio", "bslib", "cpp11", "curl", "datos", "dbplyr", "DEoptimR", "digest", "emmeans", "fontawesome", "fs", "future", "gargle", "gert", "ggplot2", "gtable", "htmltools", "httr", "igraph", "jsonlite", "kutils", "lavaan", "lme4", "magick", "markdown", "Matrix", "modeldata", "openssl", "patchwork", "pbapply", "pkgload", "processx", "progressr", "promises", "purrr", "quantmod", "quantreg", "Rcpp", "RcppArmadillo", "readxl", "remotes", "rmarkdown", "rpf", "rstudioapi", "sass", "sfsmisc", "shiny", "SimDesign", "testthat", "tinytex", "Tmisc", "uuid", "vctrs", "viridis", "xfun", "xml2"))
knitr::opts_chunk$set(echo = TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
()
tinytex::reinstall_tinytex()
install.packages("tlmgr")
install.packages("tinytex")
install.packages("tinytex")
utils::update.packages(ask = FALSE, checkBuilt = TRUE)
utils::contrib.url(repos, type)
utils::contrib.url(repos, type)
utils::update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::install_tinytex() and tinytex:::install_prebuilt()
tinytex::install_tinytex()
Y
5+5
list.files()
5+5
2+23
25+25
4+46+3
3+3
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
library(ggplot2)
library(dplyr)
library(ggplot2s45576)
library("ggplot2")
print("Hola mundo")
print(3+3)
print("3+3")
list.files()
# Usamos la funcion print para imprimir texto
print("Hola mundo")
# Usamos la funcion print para imprimir una operación
print(3+3)
1+2+3+4+5
c(1,2,3,4,5)
c(1:5)
## Calcular la suma en una secuencia
sum(1:5)
1+2+3+4+5
x <- 1:5
x
y <- 10
y
##
x + y
z <- x + y
z
z <- x+y
z
h <- "hola"
h <- hola
h <- "hola"
h
hm <- c("Hola", "mundo")
hm
hm <- c(h, "mundo")
hm
h <- "Hola"
h
hm <- c(h, "mundo")
hm
hm
print(hm)
hm
"Hola mundo"
hm
install.packages("mvoutlier")
install.packages("mvnormtest")
install.packages("WRS", repos = "http://R-Forge.R-project.org")
library(WRS)
install.packages("WRS", repos="http://R-Forge.R-project.org")
mk1 <- read.csv("MK1.csv")
## Directorio
setwd("D:\\Documentos\\Biologia UAM X\\SERVICIO\\SuelosBD\\cvs")
mk1 <- read.csv("MK1.csv")
mk2 <- read.csv("MK2.csv")
mk3 <- read.csv("MK3.csv")
mk3 <- read.csv("MK3.csv")
ml1 <- read.csv("ML1.csv")
ml2 <- read.csv("ML2.csv")
ml3 <- read.csv("ML3.csv")
mp1 <- read.csv("MP1.csv")
mp2 <- read.csv("MP2.csv")
mp3 <- read.csv("MP3.csv")
sk1 <- read.csv("SK1.csv")
sk2 <- read.csv("SK2.csv")
sk3 <- read.csv("SK3.csv")
sk3 <- read.csv("SK3.csv")
sl1 <- read.csv("SL1.csv")
sl2 <- read.csv("SL2.csv")
sl3 <- read.csv("SL3.csv")
sp1 <- read.csv("SP1.csv")
sp2 <- read.csv("SP2.csv")
sp3 <- read.csv("SP3.csv")
(c("MASS", "akima", "robustbase"))
install.packages(c("MASS", "akima", "robustbase"))
install.packages("WRS", repos = "http://R-Forge.R-project.org")
## Directorio
setwd("D:\\Documentos\\Biologia UAM X\\SERVICIO\\SuelosBD\\cvs")
mk1 <- read.csv("MK1.csv")
mk2 <- read.csv("MK2.csv")
mk3 <- read.csv("MK3.csv")
mk3 <- read.csv("MK3.csv")
ml1 <- read.csv("ML1.csv")
ml2 <- read.csv("ML2.csv")
ml3 <- read.csv("ML3.csv")
mp1 <- read.csv("MP1.csv")
mp2 <- read.csv("MP2.csv")
mp3 <- read.csv("MP3.csv")
sk1 <- read.csv("SK1.csv")
sk2 <- read.csv("SK2.csv")
sk3 <- read.csv("SK3.csv")
sk3 <- read.csv("SK3.csv")
sl1 <- read.csv("SL1.csv")
sl2 <- read.csv("SL2.csv")
sl3 <- read.csv("SL3.csv")
sp1 <- read.csv("SP1.csv")
sp2 <- read.csv("SP2.csv")
sp3 <- read.csv("SP3.csv")
## Mantillo
df_mq <- data.frame(
Total_OM_loss = c(mk1$Total.OM.loss....[1], mk2$Total.OM.loss....[1], mk3$Total.OM.loss....[1], ml1$Total.OM.loss....[1],
ml2$Total.OM.loss....[1], ml3$Total.OM.loss....[1], mp1$Total.OM.loss....[1], mp2$Total.OM.loss....[1], mp3$Total.OM.loss....[1]),
QReleased = c(mk1$Total.Q.released..J.g.1.[1],mk2$Total.Q.released..J.g.1.[1], mk3$Total.Q.released..J.g.1.[1],
ml1$Total.Q.released..J.g.1.[1], ml2$Total.Q.released..J.g.1.[1], ml3$Total.Q.released..J.g.1.[1],
mp1$Total.Q.released..J.g.1.[1], mp2$Total.Q.released..J.g.1.[1], mp3$Total.Q.released..J.g.1.[1]),
Q = c(mk1$Q....J.mg.1.OM.[1], mk2$Q....J.mg.1.OM.[1], mk3$Q....J.mg.1.OM.[1], ml1$Q....J.mg.1.OM.[1],
ml2$Q....J.mg.1.OM.[1], ml3$Q....J.mg.1.OM.[1], mp1$Q....J.mg.1.OM.[1], mp2$Q....J.mg.1.OM.[1], mp3$Q....J.mg.1.OM.[1]),
Q50 = c(mk1$Q50..J.g.1.[1], mk2$Q50..J.g.1.[1], mk3$Q50..J.g.1.[1], ml1$Q50..J.g.1.[1],
ml2$Q50..J.g.1.[1], ml3$Q50..J.g.1.[1], mp1$Q50..J.g.1.[1], mp2$Q50..J.g.1.[1], mp3$Q50..J.g.1.[1]),
T50 = c(mk1$T50Q..oC.[1], mk2$T50Q..oC.[1], mk3$T50Q..oC.[1], ml1$T50Q..oC.[1],
ml2$T50Q..oC.[1], ml3$T50Q..oC.[1], mp1$T50Q..oC.[1], mp2$T50Q..oC.[1], mp3$T50Q..oC.[1]),
Q1 = c(mk1$Q1....[1], mk2$Q1....[1], mk3$Q1....[1], ml1$Q1....[1],
ml2$Q1....[1], ml3$Q1....[1], mp1$Q1....[1], mp2$Q1....[1], mp3$Q1....[1]),
Q2= c(mk1$Q2....[1], mk2$Q2....[1], mk3$Q2....[1], ml1$Q2....[1],
ml2$Q2....[1], ml3$Q2....[1], mp1$Q2....[1], mp2$Q2....[1], mp3$Q2....[1]),
Q3= c(mk1$Q3....[1], mk2$Q3....[1], mk3$Q3....[1], ml1$Q3....[1],
ml2$Q3....[1], ml3$Q3....[1], mp1$Q3....[1], mp2$Q3....[1], mp3$Q3....[1]),
T1= c(mk1$T1Q...oC.[1], mk2$T1Q...oC.[1], mk3$T1Q...oC.[1], ml1$T1Q...oC.[1],
ml2$T1Q...oC.[1], ml3$T1Q...oC.[1], mp1$T1Q...oC.[1], mp2$T1Q...oC.[1], mp3$T1Q...oC.[1]),
T2= c(mk1$T2Q...oC.[1], mk2$T2Q...oC.[1], mk3$T2Q...oC.[1], ml1$T2Q...oC.[1],
ml2$T2Q...oC.[1], ml3$T2Q...oC.[1], mp1$T2Q...oC.[1], mp2$T2Q...oC.[1], mp3$T2Q...oC.[1]),
T3= c(mk1$T3Q...oC.[1], mk2$T3Q...oC.[1], mk3$T3Q...oC.[1], ml1$T3Q...oC.[1],
ml2$T3Q...oC.[1], ml3$T3Q...oC.[1], mp1$T3Q...oC.[1], mp2$T3Q...oC.[1], mp3$T3Q...oC.[1]),
Group = rep(c("MK", "ML", "MP"))
)
## Suelo
df_sq <- data.frame(
Total_OM_loss = c(sk1$Total.OM.loss....[1], sk2$Total.OM.loss....[1], sk3$Total.OM.loss....[1], sl1$Total.OM.loss....[1],
sl2$Total.OM.loss....[1], sl3$Total.OM.loss....[1], sp1$Total.OM.loss....[1], sp2$Total.OM.loss....[1], sp3$Total.OM.loss....[1]),
QReleased = c(sk1$Total.Q.released..J.g.1.[1],sk2$Total.Q.released..J.g.1.[1], sk3$Total.Q.released..J.g.1.[1],
sl1$Total.Q.released..J.g.1.[1], sl2$Total.Q.released..J.g.1.[1], sl3$Total.Q.released..J.g.1.[1],
sp1$Total.Q.released..J.g.1.[1], sp2$Total.Q.released..J.g.1.[1], sp3$Total.Q.released..J.g.1.[1]),
Q = c(sk1$Q....J.mg.1.OM.[1], sk2$Q....J.mg.1.OM.[1], sk3$Q....J.mg.1.OM.[1], sl1$Q....J.mg.1.OM.[1],
sl2$Q....J.mg.1.OM.[1], sl3$Q....J.mg.1.OM.[1], sp1$Q....J.mg.1.OM.[1], sp2$Q....J.mg.1.OM.[1], sp3$Q....J.mg.1.OM.[1]),
Q50 = c(sk1$Q50..J.g.1.[1], sk2$Q50..J.g.1.[1], sk3$Q50..J.g.1.[1], sl1$Q50..J.g.1.[1],
sl2$Q50..J.g.1.[1], sl3$Q50..J.g.1.[1], sp1$Q50..J.g.1.[1], sp2$Q50..J.g.1.[1], sp3$Q50..J.g.1.[1]),
T50 = c(sk1$T50Q..oC.[1], sk2$T50Q..oC.[1], sk3$T50Q..oC.[1], sl1$T50Q..oC.[1],
sl2$T50Q..oC.[1], sl3$T50Q..oC.[1], sp1$T50Q..oC.[1], sp2$T50Q..oC.[1], sp3$T50Q..oC.[1]),
Q1 = c(sk1$Q1....[1], sk2$Q1....[1], sk3$Q1....[1], sl1$Q1....[1],
sl2$Q1....[1], sl3$Q1....[1], sp1$Q1....[1], sp2$Q1....[1], sp3$Q1....[1]),
Q2= c(sk1$Q2....[1], sk2$Q2....[1], sk3$Q2....[1], sl1$Q2....[1],
sl2$Q2....[1], sl3$Q2....[1], sp1$Q2....[1], sp2$Q2....[1], sp3$Q2....[1]),
Q3= c(sk1$Q3....[1], sk2$Q3....[1], sk3$Q3....[1], sl1$Q3....[1],
sl2$Q3....[1], sl3$Q3....[1], sp1$Q3....[1], sp2$Q3....[1], sp3$Q3....[1]),
T1= c(sk1$T1Q...oC.[1], sk2$T1Q...oC.[1], sk3$T1Q...oC.[1], sl1$T1Q...oC.[1],
sl2$T1Q...oC.[1], sl3$T1Q...oC.[1], sp1$T1Q...oC.[1], sp2$T1Q...oC.[1], sp3$T1Q...oC.[1]),
T2= c(sk1$T2Q...oC.[1], sk2$T2Q...oC.[1], sk3$T2Q...oC.[1], sl1$T2Q...oC.[1],
sl2$T2Q...oC.[1], sl3$T2Q...oC.[1], sp1$T2Q...oC.[1], sp2$T2Q...oC.[1], sp3$T2Q...oC.[1]),
T3= c(sk1$T3Q...oC.[1], sk2$T3Q...oC.[1], sk3$T3Q...oC.[1], sl1$T3Q...oC.[1],
sl2$T3Q...oC.[1], sl3$T3Q...oC.[1], sp1$T3Q...oC.[1], sp2$T3Q...oC.[1], sp3$T3Q...oC.[1]),
Group = rep(c("SK", "SL", "SP"))
)
## Nuevo df Mantillo
df_mq_2 <- df_mq %>%
mutate(Q2_Q3 = df_mq$Q2 + df_mq$Q3)
library(ggplot2)
library(dplyr)
library(ggprism) ## minor thicks
library(FactoMineR)
library(ggfortify)
library(plotly)
library(factoextra)
library(GGally)
library(skimr)
library(car)
library(tidyr)
library(CCA)
library(magrittr)
## Nuevo df Mantillo
df_mq_2 <- df_mq %>%
mutate(Q2_Q3 = df_mq$Q2 + df_mq$Q3)
head(df_mq_2)
View(df_mq_2)
df_mq_3 <- df_mq_2 %>%
dplyr::select(Total_OM_loss, Q50, T50, Q1, Q2_Q3, Group)
head(df_mq_3)
View(df_mq_3)
## Nuevo df Suelo
df_sq_2 <- df_sq %>%
mutate(Q2_Q3 = df_sq$Q2 + df_sq$Q3)
head(df_sq_2)
View(df_sq_2)
df_sq_3 <- df_sq_2 %>%
dplyr::select(Total_OM_loss, Q50, T50, Q1, Q2_Q3, Group)
head(df_sq_3)
pc_mq <- df_mq_3 %>% dplyr::select(-Group) %>% as.matrix() %>% prcomp()
summary(pc_mq)
head(pc_mq)
## Removemos la variable "Species"
dfmq_pca <- PCA(df_mq_3[, -6], graph=F)
fviz_pca_biplot(dfmq_pca,
habillage = as.factor(df_mq$Group), addEllipses = TRUE,
col.var = "red", alpha.var ="cos2",
label = "var") +
scale_color_brewer(palette="Dark2")+
theme_classic()
## Agrego componentes principales al df_mq_3
df_mq_3$pc_mq <- pc_mq
componentes_principales_mq <- pc_mq$x
pc_mq_2 <- data.frame(
Group = df_mq_3$Group,
PC1 = componentes_principales_mq[, 1],
PC2 = componentes_principales_mq[, 2]
# Agrega más componentes principales según sea necesario
)
print(pc_mq_2)
attach(pc_mq_2)
names(pc_mq_2)
ggplot(pc_mq_2, aes(PC1, PC2))+
geom_point()
ggplot(pc_mq_2, aes(PC1, PC2, color = Group))+
geom_point()
Boxplot(PC1 ~ Group, data = pc_mq_2)
Boxplot(PC2 ~ Group, data = pc_mq_2)
ggplot(pc_mq_2, aes(PC1, PC2))+
geom_point()+labs(x= "PC1", y= "PC2")+
geom_smooth(method = "lm", color="red")
outcome <- cbind(pc_mq_2$PC1, pc_mq_2$PC2)
modelo1 <- manova(outcome~Group, data=pc_mq_2)
modelo1
summary(modelo1, intercept = TRUE)
summary(modelo1, intercept = TRUE, test = "Wilks")
## Anova univariado
summary.aov(modelo1)
##### MANOVA DE PCA
head(dfsq_pca)
###PCA
pc_sq <- df_sq_3 %>% dplyr::select(-Group) %>% as.matrix() %>% prcomp()
summary(pc_sq)
## Scree plot para seleccion de dimensiones
plot(pc_sq, type = "line")
str(pc_sq)
## Grafico de dos dimensiones con ggplot
dfsq_projected <- as_tibble(pc_sq$x) %>% add_column(Group = df_sq_3$Group)
pc_sq <- df_sq_3 %>% dplyr::select(-Group) %>% as.matrix() %>% prcomp()
summary(pc_sq)
## Scree plot para seleccion de dimensiones
plot(pc_sq, type = "line")
dfsq_projected <- as_tibble(pc_sq$x) %>% add_column(Group = df_sq_3$Group)
## Grafico de dos dimensiones con ggplot
dfsq_projected <- as_tibble(pc_sq$x) %>% tibble::add_column(Group = df_sq_3$Group)
ggplot(dfsq_projected, aes(x = PC1, y = PC2, color = Group)) +
geom_point()
## Removemos la variable "Species"
dfsq_pca <- PCA(df_sq_3[, -6], graph=F)
## Grafica de factores individuales
fviz_pca_ind(dfsq_pca, label="none")
fviz_pca_biplot(dfsq_pca,
habillage = as.factor(df_sq_3$Group), addEllipses = TRUE,
col.var = "red", alpha.var ="cos2",
label = "var",
pointsize.ind = 3) +
scale_color_brewer(palette = "Dark2") +
theme_classic()
componentes_principales_sq <- pc_sq$x
# Crear un nuevo data frame para los componentes principales
pc_sq_2 <- data.frame(
Group = df_sq_3$Group,
PC1 = componentes_principales_sq[, 1],
PC2 = componentes_principales_sq[, 2]
# Agrega más componentes principales según sea necesario
)
print(pc_sq_2)
attach(pc_sq_2)
names(pc_sq_2)
## Grafica puntos dispersion
ggplot(pc_sq_2, aes(PC1, PC2, color = Group))+
geom_point()
## Grafica de cajas
Boxplot(PC1 ~ Group, data = pc_sq_2)
Boxplot(PC2 ~ Group, data = pc_sq_2)
ggplot(pc_mq_2, aes(PC1, PC2))+
geom_point()+labs(x= "PC1", y= "PC2")+
geom_smooth(method = "lm", color="red")
outcome <- cbind(pc_sq_2$PC1, pc_sq_2$PC2)
modelo2 <- manova(outcome~Group, data=pc_sq_2)
## SI hay diferencias entre los grupos
summary(modelo2, intercept = TRUE) ## pillai
fviz_pca_biplot(dfsq_pca,
habillage = as.factor(df_sq_3$Group), addEllipses = TRUE,
col.var = "red", alpha.var ="cos2",
label = "var",
pointsize.ind = 3) +
scale_color_brewer(palette = "Dark2") +
theme_classic()
fviz_pca_biplot(dfmq_pca,
habillage = as.factor(df_mq$Group), addEllipses = TRUE,
col.var = "red", alpha.var ="cos2",
label = "var") +
scale_color_brewer(palette="Dark2")+
theme_classic()
ggplot(pc_mq_2, aes(PC1, PC2, color = Group))+
geom_point()
## Grafica de cajas
Boxplot(PC1 ~ Group, data = pc_mq_2)
Boxplot(PC2 ~ Group, data = pc_mq_2)
ggplot(pc_mq_2, aes(PC1, PC2))+
geom_point()+labs(x= "PC1", y= "PC2")+
geom_smooth(method = "lm", color="red")
outcome <- cbind(pc_mq_2$PC1, pc_mq_2$PC2)
modelo1 <- manova(outcome~Group, data=pc_mq_2)
modelo1
## SI hay diferencias entre los grupos
summary(modelo1, intercept = TRUE) ## pillai
## Grafica de cajas
Boxplot(PC1 ~ Group, data = pc_sq_2)
Boxplot(PC2 ~ Group, data = pc_sq_2)
ggplot(pc_mq_2, aes(PC1, PC2))+
geom_point()+labs(x= "PC1", y= "PC2")+
geom_smooth(method = "lm", color="red")
outcome <- cbind(pc_sq_2$PC1, pc_sq_2$PC2)
modelo2 <- manova(outcome~Group, data=pc_sq_2)
## SI hay diferencias entre los grupos
summary(modelo2, intercept = TRUE) ## pillai
modelo2
summary(modelo2, intercept = TRUE)
ggpairs(df_sq_3, columns = 1:5)
ggpairs(df_sq_3, columns = 1:5,
ggplot2::aes(color=Group))
### Grafica
ggpairs(df_mq_3, columns = 2:5,
aes(color = Group),
upper = list(continuous = wrap("cor", size = 5))) +
theme(
text = element_text(size = 11)
)
